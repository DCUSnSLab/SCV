# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hunter_msgs/HunterBmsStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HunterBmsStatus(genpy.Message):
  _md5sum = "fcfbadcd70fcf25cf217105d70ab4e45"
  _type = "hunter_msgs/HunterBmsStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#BMS date
uint8 SOC
uint8 SOH
float64 battery_voltage
float64 battery_current
float64 battery_temperature

#BMS status
uint8 Alarm_Status_1
uint8 Alarm_Status_2
uint8 Warning_Status_1
uint8 Warning_Status_2
"""
  __slots__ = ['SOC','SOH','battery_voltage','battery_current','battery_temperature','Alarm_Status_1','Alarm_Status_2','Warning_Status_1','Warning_Status_2']
  _slot_types = ['uint8','uint8','float64','float64','float64','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SOC,SOH,battery_voltage,battery_current,battery_temperature,Alarm_Status_1,Alarm_Status_2,Warning_Status_1,Warning_Status_2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HunterBmsStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SOC is None:
        self.SOC = 0
      if self.SOH is None:
        self.SOH = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.battery_current is None:
        self.battery_current = 0.
      if self.battery_temperature is None:
        self.battery_temperature = 0.
      if self.Alarm_Status_1 is None:
        self.Alarm_Status_1 = 0
      if self.Alarm_Status_2 is None:
        self.Alarm_Status_2 = 0
      if self.Warning_Status_1 is None:
        self.Warning_Status_1 = 0
      if self.Warning_Status_2 is None:
        self.Warning_Status_2 = 0
    else:
      self.SOC = 0
      self.SOH = 0
      self.battery_voltage = 0.
      self.battery_current = 0.
      self.battery_temperature = 0.
      self.Alarm_Status_1 = 0
      self.Alarm_Status_2 = 0
      self.Warning_Status_1 = 0
      self.Warning_Status_2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3d4B().pack(_x.SOC, _x.SOH, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.Alarm_Status_1, _x.Alarm_Status_2, _x.Warning_Status_1, _x.Warning_Status_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.SOC, _x.SOH, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.Alarm_Status_1, _x.Alarm_Status_2, _x.Warning_Status_1, _x.Warning_Status_2,) = _get_struct_2B3d4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3d4B().pack(_x.SOC, _x.SOH, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.Alarm_Status_1, _x.Alarm_Status_2, _x.Warning_Status_1, _x.Warning_Status_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.SOC, _x.SOH, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.Alarm_Status_1, _x.Alarm_Status_2, _x.Warning_Status_1, _x.Warning_Status_2,) = _get_struct_2B3d4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3d4B = None
def _get_struct_2B3d4B():
    global _struct_2B3d4B
    if _struct_2B3d4B is None:
        _struct_2B3d4B = struct.Struct("<2B3d4B")
    return _struct_2B3d4B
