// generated from rosidl_adapter/resource/msg.idl.em
// with input from ublox_msgs/msg/NavSTATUS.msg
// generated code does not contain a copyright notice


module ublox_msgs {
  module msg {
    module NavSTATUS_Constants {
      const uint8 CLASS_ID = 1;
      const uint8 MESSAGE_ID = 3;
      const uint8 GPS_NO_FIX = 0;
      const uint8 GPS_DEAD_RECKONING_ONLY = 1;
      const uint8 GPS_2D_FIX = 2;
      const uint8 GPS_3D_FIX = 3;
      const uint8 GPS_GPS_DEAD_RECKONING_COMBINED = 4;
      const uint8 GPS_TIME_ONLY_FIX = 5;
      @verbatim (language="comment", text=
        "position & velocity valid & within DOP & ACC" "\n"        "Masks")
      const uint8 FLAGS_GPS_FIX_OK = 1;
      @verbatim (language="comment", text=
        "Differential corrections were applied")
      const uint8 FLAGS_DIFF_SOLN = 2;
      @verbatim (language="comment", text=
        "Week Number valid")
      const uint8 FLAGS_WKNSET = 4;
      @verbatim (language="comment", text=
        "Time of Week valid")
      const uint8 FLAGS_TOWSET = 8;
      @verbatim (language="comment", text=
        "1 = differential corrections available")
      const uint8 FIX_STAT_DIFF_CORR_MASK = 1;
      @verbatim (language="comment", text=
        "map matching status:")
      const uint8 FIX_STAT_MAP_MATCHING_MASK = 192;
      @verbatim (language="comment", text=
        "none")
      const uint8 MAP_MATCHING_NONE = 0;
      @verbatim (language="comment", text=
        "valid but not used, i.e. map matching data" "\n"        "was received, but was too old")
      const uint8 MAP_MATCHING_VALID = 64;
      @verbatim (language="comment", text=
        "valid and used, map matching data was applied")
      const uint8 MAP_MATCHING_USED = 128;
      @verbatim (language="comment", text=
        "valid and used, map matching data was" "\n"        "applied. In case of sensor unavailability map" "\n"        "matching data enables dead reckoning." "\n"        "This requires map matched latitude/longitude" "\n"        "or heading data.")
      const uint8 MAP_MATCHING_DR = 192;
      @verbatim (language="comment", text=
        "power safe mode state (Only for FW version >= 7.01; undefined otherwise)")
      const uint8 FLAGS2_PSM_STATE_MASK = 3;
      @verbatim (language="comment", text=
        "ACQUISITION" "\n"        "[or when psm disabled]")
      const uint8 PSM_STATE_ACQUISITION = 0;
      @verbatim (language="comment", text=
        "TRACKING")
      const uint8 PSM_STATE_TRACKING = 1;
      @verbatim (language="comment", text=
        "POWER OPTIMIZED TRACKING")
      const uint8 PSM_STATE_POWER_OPTIMIZED_TRACKING = 2;
      @verbatim (language="comment", text=
        "INACTIVE")
      const uint8 PSM_STATE_INACTIVE = 3;
      @verbatim (language="comment", text=
        "Note that the spoofing state value only reflects the detector state for the" "\n"        "current navigation epoch. As spoofing can be detected most easily at the" "\n"        "transition from real signal to spoofing signal, this is also where the" "\n"        "detector is triggered the most. I.e. a value of 1 - No spoofing indicated does" "\n"        "not mean that the receiver is not spoofed, it #simply states that the detector" "\n"        "was not triggered in this epoch.")
      const uint8 FLAGS2_SPOOF_DET_STATE_MASK = 24;
      @verbatim (language="comment", text=
        "Unknown or deactivated")
      const uint8 SPOOF_DET_STATE_UNKNOWN = 0;
      @verbatim (language="comment", text=
        "No spoofing indicated")
      const uint8 SPOOF_DET_STATE_NONE = 8;
      @verbatim (language="comment", text=
        "Spoofing indicated")
      const uint8 SPOOF_DET_STATE_SPOOFING = 16;
      @verbatim (language="comment", text=
        "Multiple spoofing indication")
      const uint8 SPOOF_DET_STATE_MULTIPLE = 24;
    };
    @verbatim (language="comment", text=
      "NAV-STATUS (0x01 0x03)" "\n"
      "Receiver Navigation Status" "\n"
      "" "\n"
      "See important comments concerning validity of position and velocity given in" "\n"
      "section Navigation Output Filters.")
    struct NavSTATUS {
      @verbatim (language="comment", text=
        "GPS Millisecond time of week")
      @unit (value="ms")
      uint32 i_tow;

      @verbatim (language="comment", text=
        "GPSfix Type, this value does not qualify a fix as" "\n"
        "valid and within the limits. See note on flag gpsFixOk" "\n"
        "below")
      uint8 gps_fix;

      @verbatim (language="comment", text=
        "Navigation Status Flags")
      uint8 flags;

      @verbatim (language="comment", text=
        "Fix Status Information")
      uint8 fix_stat;

      @verbatim (language="comment", text=
        "further information about navigation output")
      uint8 flags2;

      @verbatim (language="comment", text=
        "Time to first fix (millisecond time tag)")
      @unit (value="ms")
      uint32 ttff;

      @verbatim (language="comment", text=
        "Milliseconds since Startup / Reset")
      @unit (value="ms")
      uint32 msss;
    };
  };
};
